// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// llama.cpp binding
class woolydart {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  woolydart(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  woolydart.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  load_model_result wooly_load_model(
    ffi.Pointer<ffi.Char> fname,
    int n_ctx,
    int n_seed,
    bool mlock,
    bool mmap,
    bool embeddings,
    int n_gpu_layers,
    int n_batch,
    int maingpu,
    ffi.Pointer<ffi.Char> tensorsplit,
    double rope_freq,
    double rope_scale,
  ) {
    return _wooly_load_model(
      fname,
      n_ctx,
      n_seed,
      mlock,
      mmap,
      embeddings,
      n_gpu_layers,
      n_batch,
      maingpu,
      tensorsplit,
      rope_freq,
      rope_scale,
    );
  }

  late final _wooly_load_modelPtr = _lookup<
      ffi.NativeFunction<
          load_model_result Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Float)>>('wooly_load_model');
  late final _wooly_load_model = _wooly_load_modelPtr.asFunction<
      load_model_result Function(ffi.Pointer<ffi.Char>, int, int, bool, bool,
          bool, int, int, int, ffi.Pointer<ffi.Char>, double, double)>();

  void wooly_free_model(
    ffi.Pointer<ffi.Void> ctx_ptr,
    ffi.Pointer<ffi.Void> model_ptr,
  ) {
    return _wooly_free_model(
      ctx_ptr,
      model_ptr,
    );
  }

  late final _wooly_free_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wooly_free_model');
  late final _wooly_free_model = _wooly_free_modelPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> wooly_allocate_params(
    ffi.Pointer<ffi.Char> prompt,
    int seed,
    int threads,
    int tokens,
    int top_k,
    double top_p,
    double min_p,
    double temp,
    double repeat_penalty,
    int repeat_last_n,
    bool ignore_eos,
    int n_batch,
    int n_keep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> antiprompt,
    int antiprompt_count,
    double tfs_z,
    double typical_p,
    double frequency_penalty,
    double presence_penalty,
    int mirostat,
    double mirostat_eta,
    double mirostat_tau,
    bool penalize_nl,
    ffi.Pointer<ffi.Char> logit_bias,
    ffi.Pointer<ffi.Char> session_file,
    bool prompt_cache_in_memory,
    bool mlock,
    bool mmap,
    int maingpu,
    ffi.Pointer<ffi.Char> tensorsplit,
    bool file_prompt_cache_ro,
    double rope_freq_base,
    double rope_freq_scale,
    ffi.Pointer<ffi.Char> grammar,
  ) {
    return _wooly_allocate_params(
      prompt,
      seed,
      threads,
      tokens,
      top_k,
      top_p,
      min_p,
      temp,
      repeat_penalty,
      repeat_last_n,
      ignore_eos,
      n_batch,
      n_keep,
      antiprompt,
      antiprompt_count,
      tfs_z,
      typical_p,
      frequency_penalty,
      presence_penalty,
      mirostat,
      mirostat_eta,
      mirostat_tau,
      penalize_nl,
      logit_bias,
      session_file,
      prompt_cache_in_memory,
      mlock,
      mmap,
      maingpu,
      tensorsplit,
      file_prompt_cache_ro,
      rope_freq_base,
      rope_freq_scale,
      grammar,
    );
  }

  late final _wooly_allocate_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Bool,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>)>>('wooly_allocate_params');
  late final _wooly_allocate_params = _wooly_allocate_paramsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          int,
          bool,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          double,
          double,
          double,
          double,
          int,
          double,
          double,
          bool,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          bool,
          bool,
          bool,
          int,
          ffi.Pointer<ffi.Char>,
          bool,
          double,
          double,
          ffi.Pointer<ffi.Char>)>();

  void wooly_free_params(
    ffi.Pointer<ffi.Void> params_ptr,
  ) {
    return _wooly_free_params(
      params_ptr,
    );
  }

  late final _wooly_free_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'wooly_free_params');
  late final _wooly_free_params =
      _wooly_free_paramsPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  wooly_predict_result wooly_predict(
    ffi.Pointer<ffi.Void> params_ptr,
    ffi.Pointer<ffi.Void> ctx_ptr,
    ffi.Pointer<ffi.Void> model_ptr,
    bool include_specials,
    ffi.Pointer<ffi.Char> result,
    ffi.Pointer<ffi.Void> prompt_cache_ptr,
  ) {
    return _wooly_predict(
      params_ptr,
      ctx_ptr,
      model_ptr,
      include_specials,
      result,
      prompt_cache_ptr,
    );
  }

  late final _wooly_predictPtr = _lookup<
      ffi.NativeFunction<
          wooly_predict_result Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('wooly_predict');
  late final _wooly_predict = _wooly_predictPtr.asFunction<
      wooly_predict_result Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          bool,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>)>();

  void wooly_free_prompt_cache(
    ffi.Pointer<ffi.Void> prompt_cache_ptr,
  ) {
    return _wooly_free_prompt_cache(
      prompt_cache_ptr,
    );
  }

  late final _wooly_free_prompt_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'wooly_free_prompt_cache');
  late final _wooly_free_prompt_cache = _wooly_free_prompt_cachePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

final class load_model_result extends ffi.Struct {
  external ffi.Pointer<ffi.Void> model;

  external ffi.Pointer<ffi.Void> ctx;
}

final class wooly_predict_result extends ffi.Struct {
  @ffi.Int()
  external int result;

  external ffi.Pointer<ffi.Void> prompt_cache;

  @ffi.Double()
  external double t_start_ms;

  @ffi.Double()
  external double t_end_ms;

  @ffi.Double()
  external double t_load_ms;

  @ffi.Double()
  external double t_sample_ms;

  @ffi.Double()
  external double t_p_eval_ms;

  @ffi.Double()
  external double t_eval_ms;

  @ffi.Int()
  external int n_sample;

  @ffi.Int()
  external int n_p_eval;

  @ffi.Int()
  external int n_eval;
}

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;
